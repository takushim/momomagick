#!/usr/bin/env bash
set -euo pipefail

reg_method="POC"
opt_method="Powell"
deconv=0
iter=10
first_view_x=370
second_view_x=1400
reg_view_x=""
scale_iso=0
psf_file=""
log_level='INFO'

# show usage and exit
function show_usage () {
    echo "$(basename "$0") [-f X1] [-s X2] [-r X3/@1/@2] [-p PSF] [-e REG] [-t OPT] [-z] [-d] [-i ITER] [-L LOG] file [file ...]"
    echo "Default settings:"
    echo "- psf_file: ${psf_file} (None for default)"
    echo "- reg_method: ${reg_method}"
    echo "- opt_method: ${opt_method}"
    echo "- first_view_x: ${first_view_x}"
    echo "- second_view_x: ${second_view_x}"
    echo "- reg_view_x: ${reg_view_x}"
    echo "- scale_iso: ${scale_iso}"
    echo "- deconv: ${deconv}"
    exit 1
}

# parse options
while getopts "f:s:r:p:e:di:zt:L:" OPT;
do
    case "$OPT" in
    f) first_view_x="$OPTARG" ;;
    s) second_view_x="$OPTARG" ;;
    r) reg_view_x="$OPTARG" ;;
    p) psf_file="$OPTARG" ;;
    e) reg_method="$OPTARG" ;;
    t) opt_method="$OPTARG" ;;
    d) deconv=1 ;;
    i) iter="$OPTARG" ;;
    z) scale_iso=1 ;;
    L) log_level="$OPTARG" ;;
    :) show_usage ;;
    \?) show_usage ;;
    esac
done
shift $((OPTIND - 1))

# set the image list
if [ $# == 0 ]; then
    echo "Specify at least one image file."
    exit 1
else
    files=("$@")
fi

# psf
if [[ "$psf_file" == "" ]]; then
    psf_option1=""
    psf_option2=""
else
    psf_option1="-p"
    psf_option2="$psf_file"
fi

# reg view
if [[ "$reg_view_x" == "" ]]; then
    reg_view_x="${first_view_x}"
else
    if [[ "$reg_view_x" == "@1" ]]; then
        reg_view_x="${first_view_x}"
    elif [[ "$reg_view_x" == "@2" ]]; then
        reg_view_x="${second_view_x}"
    fi
fi

# process!
for file in "${files[@]}"
do
    if [[ "$file" =~ '.ome.tif' ]]; then
        stem="$(echo ${file} | sed 's/\.ome\.tif$//')"
    elif [[ "$file" =~ '.tif' ]]; then
        stem="$(echo ${file} | sed 's/\.tif$//')"
    else
        echo "Not an image file: ${file}"
        continue
    fi
	output_reg="${stem}_${reg_method,,}.tif"
	output_crop_0="${stem}_${reg_method,,}_crop_0.tif"
	output_crop_1="${stem}_${reg_method,,}_crop_1.tif"
    output_log="${stem}_regcrop.log"

    if [[ $scale_iso == 1 ]]; then
        echo "Isomertic scaling is ON during registration." >> $output_log
        scale_option="-s"
    	output_deconv="${stem}_${reg_method,,}_crop_1_deconv_iso.tif"
    else
        scale_option=""
    	output_deconv="${stem}_${reg_method,,}_crop_1_deconv_res.tif"
    fi

    echo "Registration & cropping:" $(date) > $output_log
    echo "Method: ${reg_method,,}" >> $output_log
    echo "Reg view: ${reg_view_x}" >> $output_log

    mmregister.py -R "$reg_view_x" 0 256 256 -g 0 -e "$reg_method" -t "$opt_method" $scale_option -o "$output_reg" -L "$log_level" "$file"
    mmcrop.py -R "$first_view_x" 0 256 256 -o "$output_crop_0" -L "$log_level" "$output_reg"
    echo "First view: ${first_view_x}" >> $output_log
    
    mmcrop.py -R "$second_view_x" 0 256 256 -o "$output_crop_1" -L "$log_level" "$output_reg"
    echo "Second view: ${second_view_x}" >> $output_log

    if [[ $deconv == 1 ]]; then
        echo "Deconvolution iterating: ${iter}" >> $output_log
        mmdeconv.py -g 0 -i "$iter" $psf_option1 $psf_option2 $scale_option -o "$output_deconv" -L "$log_level" "$output_crop_1"
    fi

done
