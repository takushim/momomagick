#!/usr/bin/env bash
set -euo pipefail
source $HOME/.venv/gpu/bin/activate

file_egfp=""
file_lsm=""
reg_method="Rigid"
rev_egfp=""
path_a=0
path_b=0
log_level='INFO'
reg_scale=1

# show usage and exit
function show_usage () {
    echo "$(basename "$0") [-a|b] [-m REG] [-l FILE_LSM] [-r] [-x REG_SCALE] [-L LOG] FILE_EGFP"
    exit 1
}

# parse options
while getopts "m:l:rL:abx:" OPT;
do
    case "$OPT" in
    m) reg_method="$OPTARG" ;;
    l) file_lsm="$OPTARG" ;;
    r) rev_egfp="-r" ;;
    a) path_a=1 ;;
    b) path_b=1 ;;
    x) reg_scale="$OPTARG" ;;
    L) log_level="$OPTARG" ;;
    :) show_usage ;;
    \?) show_usage ;;
    esac
done
shift $((OPTIND - 1))

# find the fitting (bridging) image
if [[ "$file_lsm" == "" ]]; then
    file_lsm="$(find . -maxdepth 1 -iname '*LSM.tif' | head -n 1)"
fi

# find the background image 
if [[ "$#" == 0 ]]; then
    file_egfp="$(find . -maxdepth 1 -iname '*EGFP*MMStack_Pos0_crop_0.tif' | head -n 1)"
elif [[ "$#" == 1 ]]; then
    file_egfp="$@"
else
    echo "More than one background files are specified."
    exit 1
fi

# getting stems
if [[ "$file_lsm" =~ '.ome.tif' ]]; then
    stem_lsm="$(echo ${file_lsm} | sed 's/\.ome\.tif$//')"
elif [[ "$file_lsm" =~ '.tif' ]]; then
    stem_lsm="$(echo ${file_lsm} | sed 's/\.tif$//')"
else
    echo "Not an image file: ${file_lsm}"
    exit 1
fi

if [[ "$file_egfp" =~ '.ome.tif' ]]; then
    stem_egfp="$(echo ${file_egfp} | sed 's/\.ome\.tif$//')"
elif [[ "$file_egfp" =~ '.tif' ]]; then
    stem_egfp="$(echo ${file_egfp} | sed 's/\.tif$//')"
else
    echo "Not an image file: ${file_egfp}"
    exit 1
fi

# preprocessing
init_flip='-F z'
lsm_crop='-R 106 106 720 720'
if [[ $path_b == 1 ]]; then
    init_rot='-R 0 45 0'
else
    init_rot='-R 0 -45 0'
fi

# log
output_log="${stem_egfp}_lsm.log"
echo "Overlay:" $(date) > $output_log

# process!
output_lsm_crop="${stem_lsm}_crop.tif"
output_egfp_single="${stem_egfp}_single.tif"
output_egfp_overlay="${stem_egfp}_overlay.tif"

echo "Cropping the LSM file: ${file_lsm}" >> $output_log
mmcrop.py -o "$output_lsm_crop" $lsm_crop -L "$log_level" "$file_lsm"

echo "Dropping unused channels from the EGFP file: ${file_egfp}" >> $output_log
mmcrop.py -o "$output_egfp_single" $rev_egfp -c 0 -L "$log_level" "$file_egfp"

echo "Overlaying LSM image (${output_lsm_crop}) on the EGFP file (${output_egfp_single}), method: ${reg_method,,}" >> $output_log
mmoverlay.py -g 0 -o "$output_egfp_overlay" -c 1 0 -s -e "${reg_method}" $init_flip $init_rot -x "$reg_scale" \
             -L "$log_level" "$output_lsm_crop" "$output_egfp_single"

