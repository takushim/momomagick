#!/usr/bin/env bash
set -euo pipefail

file_egfp=""
file_back=""
file_bridge=""
reg_method="Rigid"
rev_egfp=""
post_shift=""
log_level='INFO'

# show usage and exit
function show_usage () {
    echo "$(basename "$0") [-m REG][-e FILE_EGFP] [-b FILE_BRIDGE] [-r] [-p \"X Y Z\"] [-L LOG] FILE_BACK"
    exit 1
}

# parse options
while getopts "m:e:b:p:rL:" OPT;
do
    case "$OPT" in
    m) reg_method="$OPTARG" ;;
    e) file_egfp="$OPTARG" ;;
    b) file_bridge="$OPTARG" ;;
    r) rev_egfp="-r" ;;
    p) post_shift="-P $OPTARG" ;;
    L) log_level="$OPTARG" ;;
    :) show_usage ;;
    \?) show_usage ;;
    esac
done
shift $((OPTIND - 1))

# find the overlay image
if [[ "$file_egfp" == "" ]]; then
    #file_egfp="$(find . -maxdepth 1 -iname '*EGFP*MMStack_Pos0_crop_0.tif' | head -n 1)"
    file_egfp="$(find . -maxdepth 1 -iname '*EGFP*fusion_?.tif' | head -n 1)"
fi

# find the fitting (bridging) image
if [[ "$file_bridge" == "" ]]; then
    file_bridge="$(find . -maxdepth 1 -iname '*MMStack_Pos0_*_crop_0.tif' | head -n 1)"
fi

# find the background image 
if [[ "$#" == 0 ]]; then
    file_back="$(find . -maxdepth 1 -iname '*MMStack_Pos0_*_crop_1_deconv_res.tif' | head -n 1)"
    if [[ "$file_back" == "" ]]; then
        file_back="$(find . -maxdepth 1 -iname '*MMStack_Pos0_*_crop_1.tif' | head -n 1)"
    fi
elif [[ "$#" == 1 ]]; then
    file_back="$@"
else
    echo "More than one background files are specified."
    exit 1
fi

# getting stems
if [[ "$file_back" =~ '.ome.tif' ]]; then
    stem_back="$(echo ${file_back} | sed 's/\.ome\.tif$//')"
elif [[ "$file_back" =~ '.tif' ]]; then
    stem_back="$(echo ${file_back} | sed 's/\.tif$//')"
else
    echo "Not an image file: ${file_back}"
    exit 1
fi

if [[ "$file_egfp" =~ '.ome.tif' ]]; then
    stem_egfp="$(echo ${file_egfp} | sed 's/\.ome\.tif$//')"
elif [[ "$file_egfp" =~ '.tif' ]]; then
    stem_egfp="$(echo ${file_egfp} | sed 's/\.tif$//')"
else
    echo "Not an image file: ${file_egfp}"
    exit 1
fi

# log
output_log="${stem_back}_overlay.log"
echo "Overlay:" $(date) > $output_log

# process!
output_egfp_single="${stem_egfp}_single.tif"
output_egfp_double="${stem_egfp}_double.tif"
output_fitting="${stem_back}_fitting.tif"
output_overlay="${stem_back}_overlay.tif"

echo "Dropping unused channels from the EGFP file: ${file_egfp}" >> $output_log
mmcrop.py -o "$output_egfp_single" $rev_egfp -c 0 -L "$log_level" "$file_egfp"

echo "Overlaying EGFP (${output_egfp_single}) on the bridging file (${file_bridge}), method: ${reg_method,,}" >> $output_log
mmoverlay.py -g 0 -o "$output_egfp_double" -c 0 0 -e "${reg_method}" -L "$log_level" "$output_egfp_single" "$file_bridge"

echo "Overlaying the combined file (${output_egfp_double}) on the background (${file_back}) using XY registration" >> $output_log
echo "Post-shift: ${post_shift}" >> $output_log
mmoverlay.py -g 0 -o "$output_fitting" -c 1 0 -e XY -L "$log_level" $post_shift "$output_egfp_double" "$file_back"

echo "Dropping unused channels from the output file: ${output_overlay}" >> $output_log
mmcrop.py -o "$output_overlay" -c -1 -L "$log_level" "$output_fitting"

