#!/bin/sh
set -euo pipefail

iters=0
reg_method="Full"
keep_channels=""
path_a=0
path_b=0
rev_channels="-m 0 -s 1"
view_x=370
log_level='INFO'
restore_scale=""

# show usage and exit
function show_usage () {
    echo "$(basename "$0") [-x VIEW_X] [-m REG_METHOD] [-i ITER] [-k] [-a|b] [-r] [-c] [-L LOG] file [file ...]"
    exit 1
}

# parse options
while getopts "x:m:i:kabrcL:" OPT;
do
    case "$OPT" in
    x) view_x="$OPTARG" ;;
    m) reg_method="${OPTARG,,}" ;;
    k) keep_channels="-k" ;;
    i) iters="$OPTARG" ;;
    a) path_a=1 ;;
    b) path_b=1 ;;
    r) rev_channels="-m 1 -s 0" ;;
    c) restore_scale="-c" ;;
    L) log_level="$OPTARG" ;;
     :) show_usage ;;
    \?) show_usage ;;
    esac
done
shift $((OPTIND - 1))

if [[ $path_a == 0 && $path_b == 0 ]]; then
    path_a=1
    path_b=1
fi

# set the image list
if [ $# == 0 ]; then
    echo "Specify at least one image file."
    exit 1
else
    files=("$@")
fi

# process!
for file in "${files[@]}"
do
    if [[ "$file" =~ '.ome.tif' ]]; then
        stem="$(echo ${file} | sed 's/\.ome\.tif$//')"
    elif [[ "$file" =~ '.tif' ]]; then
        stem="$(echo ${file} | sed 's/\.tif$//')"
    else
        echo "Not an image file: ${file}"
        continue
    fi
	output_crop="${stem}_crop_0.tif"
	output_fusion_a="${stem}_fusion_a.tif"
	output_fusion_b="${stem}_fusion_b.tif"
    output_log="${stem}_fusion.log"

    echo "Fusion:" $(date) > $output_log
    echo "Method: ${reg_method,,}" >> $output_log
    echo "Keep channels: ${keep_channels}" >> $output_log

    if [[ "x${view_x}" == "x" ]]; then
        mmcrop.py -P 0 -o "$output_crop" -L "$log_level" "$file"
        echo "View: preset 0" >> $output_log
    else
        mmcrop.py -R "$view_x" 0 256 256 -o "$output_crop" -L "$log_level" "$file"
        echo "View: ${view_x}" >> $output_log
    fi

    echo "Channel order: ${rev_channels}" >> $output_log

	# Main = A, Sub = B
    if [[ $path_a == 1 ]]; then
	    mmfusion.py -g 0 $rev_channels -i "$iters" -r -90 $keep_channels $restore_scale -e "${reg_method^}" -o "$output_fusion_a" -L "$log_level" "$output_crop"
        echo "Output A with iteration: ${iters}" >> $output_log
    fi

	# Main = B, Sub = A
    if [[ $path_b == 1 ]]; then
	    mmfusion.py -g 0 $rev_channels -i "$iters" -r 90 $keep_channels $restore_scale -e "${reg_method^}" -o "$output_fusion_b" -L "$log_level" "$output_crop"
        echo "Output B with iteration: ${iters}" >> $output_log
    fi

	# This worked for the sub channel acquired using Path B
	#mmfusion.py -g 0 -m 1 -s 0 -r -90 -e Full -o "$output_fusion_1" -L "$log_level" "$output_crop"
done

