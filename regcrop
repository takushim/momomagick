#!/usr/bin/env bash
source $HOME/.venv/gpu/bin/activate

reg_method="drift"

# show usage and exit
function show_usage () {
    echo "$(basename "$0") [-f FIRST_VIEW_X] [-s SECOND_VIEW_X] [-m REG_METHOD] file [file ...]"
    exit 1
}

# parse options
while getopts "f:s:" OPT;
do
    case "$OPT" in
    f) first_view_x="$OPTARG" ;;
    s) second_view_x="$OPTARG" ;;
    m) reg_method="${OPTARG,,}" ;;
    :) show_usage ;;
    \?) show_usage ;;
    esac
done
shift $((OPTIND - 1))

# find an image file if not specified
if [ $# == 0 ]; then
    files=("$(find . -iname '*MMStack_Pos0.ome.tif' | head -n 1)")
else
    files=("$@")
fi

# process!
for file in "${files[@]}"
do
    if [[ "$file" =~ '.ome.tif' ]]; then
        stem="$(echo ${file} | sed 's/\.ome\.tif$//')"
    elif [[ "$file" =~ '.tif' ]]; then
        stem="$(echo ${file} | sed 's/\.tif$//')"
    else
        echo "Not an image file: ${file}"
        continue
    fi
	output_reg="${stem}_${reg_method,,}.tif"
	output_crop_0="${stem}_${reg_method,,}_crop_0.tif"
	output_crop_1="${stem}_${reg_method,,}_crop_1.tif"

    if [[ "x$first_view_x" == "x" ]]; then
        mmregister.py -P 0 -g 0 -e "${reg_method^}" -A -a "$output_reg" "$file"
        mmcrop.py -P 0 -o "$output_crop_0" "$output_reg"
    else
        mmregister.py -R "$first_view_x" 0 256 256 -g 0 -e "${reg_method^}" -A -a "$output_reg" "$file"
        mmcrop.py -R "$first_view_x" 0 256 256 -o "$output_crop_0" "$output_reg"
    fi
    
    if [[ "x$second_view_x" == "x" ]]; then
        mmcrop.py -P 1 -o "$output_crop_0" "$output_reg"
    else
        mmcrop.py -R "$second_view_x" 0 256 256 -o "$output_crop_1" "$output_reg"
    fi
done
